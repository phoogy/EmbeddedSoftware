/*
 * packet.c
 *
 *  Created on: 22 Mar 2017
 *      Author: 10692820
 */

#include "packet.h"
#include "UART.h"

#define CMD_TOWER_STARTUP 0x04
#define CMD_TOWER_VERSION 0x09
#define CMD_TOWER_NUMBER 0x0B

#define SEND_TOWER_STARTUP Packet_Put(CMD_TOWER_STARTUP,0,0,0)
#define SEND_TOWER_VERSION Packet_Put(CMD_TOWER_VERSION,118,1,00)

#define SEND_TOWER_NUMBER Packet_Put(CMD_TOWER_NUMBER,1,TOWERNUMBER_LSB,TOWERNUMBER_MSB)



bool Check_Checksum(void);
void HandlePacket(void);

void HandleTowerNumber(uint16_t towerNumber);
void TowerNumber_Send(void);
void TowerStartup_Send(void);
void TowerVersion_Send(void);

//uint16_t Tower_Number;
uint8_t NumBytes,
	Tower_Number_MSB,
	Tower_Number_LSB,
	Packet_Command,		/*!< Initialising the packet's command */
	Packet_Parameter1,	/*!< Initialising the packet's parameter1 */
	Packet_Parameter2,	/*!< Initialising the packet's parameter2 */
	Packet_Parameter3,	/*!< Initialising the packet's parameter3 */
	Packet_Checksum;	/*!< Initialising the packet's checksum */

bool Packet_Init(const uint32_t baudRate, const uint32_t moduleClk){
  Tower_Number_MSB = 0;
  Tower_Number_LSB = 0;
  HandleTowerNumber(2820);
  NumBytes = 0;
  Packet_Command = 0;
  Packet_Parameter1 = 0;
  Packet_Parameter2 = 0;
  Packet_Parameter3 = 0;
  Packet_Checksum = 0;
  return UART_Init(baudRate,moduleClk);
}

bool Packet_Get(void){
  if(UART_InChar(&Packet_Checksum)){
      NumBytes++;
      if (NumBytes == 5){
	  if(Check_Checksum()){
	      NumBytes = 0;
	      return true;
	  }
	  else{
	      Packet_Command = Packet_Parameter1;
	      Packet_Parameter1 = Packet_Parameter2;
	      Packet_Parameter2 = Packet_Parameter3;
	      Packet_Parameter3 = Packet_Checksum;
	      NumBytes--;
	  }
      }
  }
  return false;
}

bool Packet_Put(const uint8_t command, const uint8_t parameter1, const uint8_t parameter2, const uint8_t parameter3){
  // Puts each byte into the FIFO and returns true if all is successful
  return(UART_OutChar(command) && UART_OutChar(parameter1) && UART_OutChar(parameter2) && UART_OutChar(parameter3) && UART_OutChar(command ^ parameter1 ^ parameter2 ^ parameter3));
}

bool Check_Checksum(void){
  return (Packet_Checksum == (Packet_Command ^ Packet_Parameter1 ^ Packet_Parameter2 ^ Packet_Parameter3));
}

void HandlePacket(void){

/*
 * Special - Get startup values
 * Parameter 1: 0
 * Parameter 2: 0
 * Parameter 3: 0
 * Note: The PC will
 */
  if(Packet_Command == CMD_TOWER_STARTUP && Packet_Parameter1 == 0 && Packet_Parameter2 == 0 && Packet_Parameter3 == 0){
    TowerStartup_Send();
  }

  /*
   * Special – Get version
   * Parameter 1: ‘v’
   * Parameter 2: ‘x’
   * Parameter 3: CR
   */
  if(Packet_Command == CMD_TOWER_VERSION && Packet_Parameter1 == 118 && Packet_Parameter2 == 120 && Packet_Parameter3 == 13){
      TowerVersion_Send();
  }

  /*
   * Tower Number
   * Parameter 1: 1 = get Tower number
   * 		  2 = set Tower number
   * Parameter 2: LSB for a “set”, 0 for a “get”
   * Parameter 3: MSB for a “set”, 0 for a “get”
   * Note: The Tower number is an unsigned 16-bit number.
   */
  if(Packet_Command == CMD_TOWER_NUMBER){
      if(Packet_Parameter1 == 1 && Packet_Parameter2 == 0 && Packet_Parameter3 == 0){
	TowerNumber_Send();
      }
      if(Packet_Parameter1 == 2){
	  uint16_t towerNumber = ((uint16_t)Packet_Parameter3 << 8) + Packet_Parameter2;
	  HandleTowerNumber(towerNumber);
	  //TowerNumber_Send();      // Do we send tower number after it has been changed?
      }
  }
}
void TowerNumber_Send(void){
  /*
   * Tower Number
   * Parameter 1: 1
   * Parameter 2: Tower_Number_LSB
   * Parameter 3: Tower_Number_MSB
   */
  Packet_Put(CMD_TOWER_NUMBER,1,Tower_Number_LSB,Tower_Number_MSB);
}

void TowerVersion_Send(void){
  /*
   * Special – Tower version
   * Parameter 1: ‘v’ = version
   * Parameter 2: Major Version Number
   * Parameter 3: Minor Version Number (out of 100)
   * Note: e.g. V1.3 has a major version number of 1 and a minor version number of 30.
   */
  Packet_Put(CMD_TOWER_VERSION,118,1,0);
}

void TowerStartup_Send(void){
  /*
   * Tower Startup
   * Parameter 1: 0
   * Parameter 2: 0
   * Parameter 3: 0
   */
  Packet_Put(CMD_TOWER_STARTUP,0,0,0);
}

void HandleTowerNumber(uint16_t towerNumber){

  /* Gets the last four numbers from the studentNumber */
  uint16_t lastfourNumbers = (uint16_t)(towerNumber % 10000);

  /* Splits the binary of the last four numbers */
  Tower_Number_MSB = (uint8_t)((lastfourNumbers & 0x1F)>>8);
  Tower_Number_LSB = (uint8_t)(lastfourNumbers & 0xFF);
}
